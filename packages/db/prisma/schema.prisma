// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  emailVerified  DateTime?
  name           String?
  image          String?
  orgMemberships OrgMember[]
  accounts       Account[]
  sessions       Session[]
  ownedOrgs      Org[]        @relation("OrgOwner")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Org {
  id           String             @id @default(cuid())
  name         String
  slug         String             @unique
  ownerId      String
  owner        User               @relation("OrgOwner", fields: [ownerId], references: [id])
  billingPlan  BillingPlan        @default(FREE)
  stripeCustId String?            @unique
  quotas       Json               // computed effective quotas
  members      OrgMember[]
  socials      SocialConnection[]
  campaigns    Campaign[]
  eventLogs    EventLog[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model OrgMember {
  id        String   @id @default(cuid())
  orgId     String
  userId    String
  role      OrgRole  @default(MEMBER)
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([orgId, userId])
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
}

enum BillingPlan {
  FREE
  PRO
  TEAM
}

model SocialConnection {
  id         String         @id @default(cuid())
  orgId      String
  platform   SocialPlatform
  accountRef String // channel/page id
  accountName String?
  access     String // encrypted tokens/refresh (JSON string encrypted)
  org        Org            @relation(fields: [orgId], references: [id], onDelete: Cascade)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([orgId, platform, accountRef])
}

enum SocialPlatform {
  YOUTUBE
  TIKTOK
  INSTAGRAM
  FACEBOOK
}

model Campaign {
  id          String         @id @default(cuid())
  orgId       String
  name        String
  niche       String
  primaryLang String // ISO code
  status      CampaignStatus @default(DRAFT)
  config      Json // cadence, counts, locales, templates
  org         Org            @relation(fields: [orgId], references: [id], onDelete: Cascade)
  items       MediaItem[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

enum CampaignStatus {
  DRAFT
  RUNNING
  PAUSED
  ARCHIVED
}

model MediaItem {
  id          String      @id @default(cuid())
  campaignId  String
  locale      String // ISO
  script      Json // structured script parts
  assets      Json // stock refs, tts url, srt url
  render      Json // provider, jobId, progress, outputUrl
  durationSec Int?
  status      MediaStatus @default(PENDING)
  campaign    Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  posts       PostTask[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum MediaStatus {
  PENDING
  RENDERING
  READY
  FAILED
}

model PostTask {
  id          String         @id @default(cuid())
  mediaItemId String
  platform    SocialPlatform
  scheduledAt DateTime
  status      PostStatus     @default(SCHEDULED)
  result      Json? // externalId, publishUrl, error
  mediaItem   MediaItem      @relation(fields: [mediaItemId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

enum PostStatus {
  SCHEDULED
  POSTING
  POSTED
  FAILED
}

model EventLog {
  id        String   @id @default(cuid())
  orgId     String
  type      String
  level     String // info, warn, error
  payload   Json
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([orgId, createdAt])
  @@index([type, createdAt])
}
