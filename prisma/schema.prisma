// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  campaigns     Campaign[]
  socialAccounts SocialAccount[]
  subscription  Subscription?
  usage         Usage?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Campaign {
  id          String   @id @default(cuid())
  userId      String
  name        String
  niche       String
  language    String   @default("en")
  description String?
  status      String   @default("active") // active, paused, completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  videos Video[]
  schedules Schedule[]

  @@index([userId])
}

model Video {
  id          String   @id @default(cuid())
  campaignId  String
  title       String
  description String?
  script      String   @db.Text
  videoUrl    String?
  thumbnailUrl String?
  duration    Int?     // in seconds
  status      String   @default("pending") // pending, generating, completed, failed, posted
  error       String?  @db.Text
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  posts    Post[]
  analytics VideoAnalytics[]

  @@index([campaignId])
  @@index([status])
}

model SocialAccount {
  id            String   @id @default(cuid())
  userId        String
  platform      String   // youtube, tiktok, instagram
  platformId    String
  username      String?
  accessToken   String   @db.Text
  refreshToken  String?  @db.Text
  tokenExpiry   DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts Post[]

  @@unique([userId, platform])
  @@index([userId])
}

model Post {
  id              String   @id @default(cuid())
  videoId         String
  socialAccountId String
  platformPostId  String?
  postUrl         String?
  status          String   @default("scheduled") // scheduled, posting, posted, failed
  scheduledAt     DateTime?
  postedAt        DateTime?
  error           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  video         Video         @relation(fields: [videoId], references: [id], onDelete: Cascade)
  socialAccount SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)

  @@index([videoId])
  @@index([socialAccountId])
  @@index([status])
}

model Schedule {
  id         String   @id @default(cuid())
  campaignId String
  dayOfWeek  Int      // 0-6 (Sunday-Saturday)
  timeOfDay  String   // HH:MM format
  timezone   String   @default("UTC")
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
}

model VideoAnalytics {
  id        String   @id @default(cuid())
  videoId   String
  platform  String
  views     Int      @default(0)
  likes     Int      @default(0)
  shares    Int      @default(0)
  comments  Int      @default(0)
  watchTime Int      @default(0) // in seconds
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId])
  @@index([platform])
  @@index([date])
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  stripeCustomerId  String?  @unique
  stripeSubscriptionId String? @unique
  stripePriceId     String?
  plan              String   @default("free") // free, basic, pro, enterprise
  status            String   @default("active") // active, canceled, past_due
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Usage {
  id              String   @id @default(cuid())
  userId          String   @unique
  videosGenerated Int      @default(0)
  videosPosted    Int      @default(0)
  storageUsed     BigInt   @default(0) // in bytes
  resetAt         DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
